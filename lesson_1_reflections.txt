How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Having file history plays a huge role in debugging an application or simply reverting back in case one does not want like the direction that is going. 



What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros is that they should be logical saves that provides meaningful information. Cons is that they are subject to user error. 



Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because Google Docs only really allows things like colloborations on one document whether Git would allow it on a repository. 



How can you use the commands git log and git diff to view the history of files?

To see how many insertions and deletions took place. Also can find other errors. 



How might using version control make you more confident to make changes that could break something?

It makes you more confident because you not only have a back up pland but a means to check the difference bewteen the last commit and the current one selected. 



Now that you have your workspace set up, what do you want to try using Git for?

Future web projects



What happens when you initialize a repository? Why do you need to do it?

You start a new folder that is recognized by git hub. It is important when starting new projects. 



How is the staging area different from the working directory and the repository? What value do you think it offers?

Working area is the current file a programmer is changing. Staging area is the process of uploading the file to the platform. Commit is to officially send it to the repository



